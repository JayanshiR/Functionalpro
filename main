package funtionalprogramming;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Main {

    // Student class to hold information about each student
    static class Student {
        String name;
        String id;
        String course;
        String module;

        Student(String name, String id, String course, String module) {
            this.name = name;
            this.id = id;
            this.course = course;
            this.module = module;
        }

        @Override
        public String toString() {
            return "Name: " + name + ", ID: " + id + ", Course: " + course + ", Module: " + module;
        }
    }

    public static void main(String[] args) {
        List<Student> listStd = new ArrayList<>();
        listStd.add(new Student("John Smith", "001", "Computer Science", "Functional Programming"));
        listStd.add(new Student("Jane Doe", "002", "Computer Science", "Algorithms"));
        listStd.add(new Student("Alice Johnson", "003", "Information Technology", "Data Structures"));

        // Using try-with-resources to ensure the Scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            // Consumer to display the menu and handle user input
            Consumer<List<Student>> displayMenu = (students) -> {
                boolean continueRunning = true;
                while (continueRunning) {
                    System.out.println("Student Registering System");
                    System.out.println("\nEnter 1 : Display Student List");
                    System.out.println("Enter 2 : Create new Student Record");
                    System.out.println("Enter 3 : Search Existing Student");
                    System.out.println("Enter 4 : Delete Student");
                    System.out.println("Enter 5 : Get Students on a Course Matching a Given Name");
                    System.out.println("Enter 6 : Get Students Whose Names Begin with a Given Letter");
                    System.out.println("Enter 7 : Exit\n");

                    int userInput = scanner.nextInt();
                    scanner.nextLine();  // consume newline

                    switch (userInput) {
                        case 1:
                            students.forEach(student -> System.out.println("=> " + student));
                            break;

                        case 2:
                            System.out.print("Enter New Student Name: ");
                            String newName = scanner.nextLine();
                            System.out.print("Enter New Student ID: ");
                            String newId = scanner.nextLine();
                            System.out.print("Enter New Student Course: ");
                            String newCourse = scanner.nextLine();
                            System.out.print("Enter New Student Module: ");
                            String newModule = scanner.nextLine();

                            boolean idExists = students.stream().anyMatch(s -> s.id.equals(newId));
                            if (idExists) {
                                System.out.println("\nThis Student ID " + newId + " Already Exists In The Database");
                            } else {
                                students.add(new Student(newName, newId, newCourse, newModule));
                                System.out.println("\n=> New Student Successfully Added \n");
                                students.forEach(student -> System.out.println("=> " + student));
                            }
                            break;

                        case 3:
                            System.out.println("Search by: 1-Name, 2-ID, 3-Course, 4-Module");
                            int searchOption = scanner.nextInt();
                            scanner.nextLine();  // consume newline
                            System.out.print("Enter search query: ");
                            String query = scanner.nextLine();

                            Predicate<Student> searchPredicate = createSearchPredicate(searchOption, query);
                            List<Student> foundStudents = students.stream()
                                    .filter(searchPredicate)
                                    .collect(Collectors.toList());

                            if (foundStudents.isEmpty()) {
                                System.out.println("\n=> No Records Found");
                            } else {
                                foundStudents.forEach(student -> System.out.println("=> " + student));
                            }
                            break;

                        case 4:
                            System.out.print("Enter Student ID To Remove: ");
                            String rmId = scanner.nextLine();
                            Optional<Student> studentToRemove = students.stream()
                                    .filter(student -> student.id.equals(rmId))
                                    .findFirst();

                            studentToRemove.ifPresentOrElse(
                                    student -> {
                                        students.remove(student);
                                        System.out.println("\n=> Student " + student.name + " Successfully Deleted \n");
                                        students.forEach(s -> System.out.println("=> " + s));
                                    },
                                    () -> System.out.println("\n=> No Record Found of This Student ID " + rmId)
                            );
                            break;

                        case 5:
                            System.out.print("Enter Course Name: ");
                            String courseName = scanner.nextLine();
                            System.out.print("Enter Name Text to Match: ");
                            String nameText = scanner.nextLine();

                            List<Student> matchedStudents = students.stream()
                                    .filter(student -> student.course.equalsIgnoreCase(courseName) &&
                                            student.name.toLowerCase().contains(nameText.toLowerCase()))
                                    .collect(Collectors.toList());

                            if (matchedStudents.isEmpty()) {
                                System.out.println("\n=> No Records Found");
                            } else {
                                matchedStudents.forEach(student -> System.out.println("=> " + student));
                            }
                            break;

                        case 6:
                            System.out.print("Enter the starting letter: ");
                            char startingLetter = scanner.nextLine().toLowerCase().charAt(0);

                            List<Student> studentsWithStartingLetter = students.stream()
                                    .filter(student -> student.name.toLowerCase().charAt(0) == startingLetter)
                                    .collect(Collectors.toList());

                            if (studentsWithStartingLetter.isEmpty()) {
                                System.out.println("\n=> No Records Found");
                            } else {
                                studentsWithStartingLetter.forEach(student -> System.out.println("=> " + student));
                            }
                            break;

                        case 7:
                            continueRunning = false;
                            break;

                        default:
                            System.out.println("Please Enter a Valid Option");
                    }
                }
            };

            // Call the displayMenu to start the program
            displayMenu.accept(listStd);
        }
    }

    // Helper method to create search predicate based on option
    private static Predicate<Student> createSearchPredicate(int searchOption, String query) {
        switch (searchOption) {
            case 1:
                return student -> student.name.equalsIgnoreCase(query);
            case 2:
                return student -> student.id.equals(query);
            case 3:
                return student -> student.course.equalsIgnoreCase(query);
            case 4:
                return student -> student.module.equalsIgnoreCase(query);
            default:
                return student -> false;
        }
    }
}
